#include "stepper/stepper.hpp"

stepper::stepper(){

}

stepper::stepper(int stepPin, int dirPin, int enablePin, int cfg1Pin, int cfg2Pin, int maxSpeed, float acceleration){
    this->_stepPin = stepPin;
    this->_dirPin = dirPin;
    this->_enablePin = enablePin;
    this->_cfg1Pin = cfg1Pin;
    this->_cfg2Pin = cfg2Pin;
    this->_speed = 0;
    this->_targetSpeed = 0;
    this->_position = 0;
    this-> _lastStepTime = 0;

    this->_n = 0;
    this->_c0 = 0.0;
    this->_cn = 0.0;
    this->_cmin = 1.0;


    setMaxSpeed(maxSpeed);
    setAcceleration(acceleration);

    //enable input / outputs
    pinMode(_stepPin, OUTPUT);
    pinMode(_dirPin, OUTPUT);
    pinMode(_enablePin, OUTPUT);
    pinMode(_cfg1Pin, OUTPUT);
    pinMode(_cfg2Pin, OUTPUT);


}


void stepper::setTargetSpeed(float targetSpeed){
    this->_targetSpeed = targetSpeed;
    Serial.print("target speed is now : ");
    Serial.print(targetSpeed);
    Serial.print("\n");
    computeNewSpeed();
}

void stepper::run(){
    //Serial.print("running stepper");
    
    if(!_stepInterval){
        //Serial.print("step interval is 0");
        return;
    }
    unsigned long time = micros();
    

    if (time - _lastStepTime >= _stepInterval) {
        if(_direction == DIRECTION_CW){
            _position++;
        }else{
            _position--;
        }
        step();

        _lastStepTime = time;
        computeNewSpeed();
    }else{
        return;
    }
}


int stepper::getPosition(){
    return _position;
}

float stepper::getSpeed(){
    return _speed;
}

float stepper::getTargetSpeed(){
    return _targetSpeed;
}

void stepper::setMaxSpeed(int speed){
    if (speed < 0.0)
       speed = -speed;
    if (_maxSpeed != speed)
    {
        _maxSpeed = speed;
        _cmin = 1000000.0 / speed;
        // Recompute _n from current speed and adjust speed if accelerating or cruising
        if (_n > 0)
        {
            _n = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
            computeNewSpeed();
        }
    }
}


void stepper::setAcceleration(float acceleration){
    // Serial.println("Setting acceleration : ");
    // Serial.println(acceleration);
    

    if(acceleration == 0){
        // Serial.println("Acceleration is 0");
        return;
    }
    if(acceleration < 0){
        // Serial.println("Acceleration is negative");

        acceleration = -acceleration;
    }
    // Serial.println("Acceleration : ");
    // Serial.println(acceleration);
    // Serial.println("_acceleration : ");
    // Serial.println(_acceleration);


    if(_acceleration != acceleration){
        _n = _n * (_acceleration / acceleration);
        //Serial.print("_n is now : ");
        //Serial.print(_n);
        //Serial.print("\n");

        _c0 = 0.676 * sqrt(2.0/acceleration) * 1000000.0;
        //Serial.print("_c0 is now : ");
        //Serial.print(_c0);
        //Serial.print("\n");
        _acceleration = acceleration;
        computeNewSpeed();
    }
}

int stepper::getMaxSpeed(){
    return _maxSpeed;
}

float stepper::getAcceleration(){
    return _acceleration;
}

unsigned long stepper::computeNewSpeed(){
    
    
    long stepstostop = (long)((_speed * _speed) / (2.0 * _acceleration));
    // Compute ideal acceleration step time in microseconds

    //check if we are already at the desired speed :

    //if(_speed == _targetSpeed){
    //    return _stepInterval; //  in this case, the stepInterval is the same as previously
    //}

    // if we are smaller than target speed :
    if(_speed < _targetSpeed){
        // if we are going forward, that means we have to accelerate: 
        if(_speed >= 0){
            if(_n < 0){
                //we were decelerating and we need to accelerate
                _n = -_n;
            }  
        }else{
            //we are going in the wrong direction. We first need to decelerate
            if (_n > 0){
                // we were accelerating : we now decelerate
                _n = -_n;
            }
        }
        
    }else if (_speed > _targetSpeed) {
        //if we are greater than the target speed :

        //if we are going backward, we have to accelerate : 
        if (_speed <= 0 ){
            if(_n < 0){
                // we were decelerating and we need to accelerate :
                _n = -_n;
            }
        }else{
            // we are going in the wrong direction. We first need to decelerate.
            if(_n > 0){
                _n = -_n;
            }
        }

    }
    // if _speed == _target_speed we do nothing to n 


    // need to accelerate or decelerate : 
    if (_n == 0)
    {
        //Serial.println("First Step");
        //this is the first step from a stop
        _cn = _c0;
        _direction = (_targetSpeed > 0) ?  DIRECTION_CW : DIRECTION_CCW;
    }
    else
    {
	// Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
    //Serial.println("Equation 13");
	    _cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
	    _cn = max(_cn, _cmin); 
    }
    

    _n++;
    _stepInterval = _cn;
    _speed = 1000000.0 / _cn;
    
    
    
    // do we need to stop completely ?
    if(_targetSpeed == 0 && stepstostop < 1){
        _stepInterval = 0.0;
        _cn = 0;
        _speed = 0;
        _n = 0;
    }

    if(_direction == DIRECTION_CCW){
        _speed = -_speed;
    }

    return _stepInterval;
}

void stepper::step(){
 
    //set the dir pin correctl
    digitalWrite(_dirPin, _direction ? HIGH : LOW);

    //set the step pin high 
    digitalWrite(_stepPin, HIGH);

    delayMicroseconds(_minPulseWidth);
    digitalWrite(_stepPin, LOW);   

}

void stepper::log(){

    // check if Serial is opened
    // Serial.print("Stepper on pin");
    // Serial.print(_stepPin);
    // Serial.print("\n");
    
    Serial.print(">n:");
    Serial.print(_n);
    Serial.print("\n");

    Serial.print(">_lastStepTime:");
    Serial.print(_lastStepTime);
    Serial.print("\n");

    Serial.print(">cn:");
    Serial.print(_cn);
    Serial.print("\n");

    Serial.print(">_stepInterval:");
    Serial.print(_stepInterval);
    Serial.print("\n");

    Serial.print(">_speed:");
    Serial.print(_speed);
    Serial.print("\n");

    Serial.print(">_targetspeed:");
    Serial.print(_targetSpeed);
    Serial.print("\n");
}